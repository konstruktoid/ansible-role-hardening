---
- name: Verify
  hosts: all
  any_errors_fatal: true
  tasks:
    - name: Reboot and reconnect
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Reboot host
          become: true
          ansible.builtin.reboot:

        - name: Wait for the host and reconnect
          ansible.builtin.wait_for:
            port: 22
            host: "{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}"
            delay: 10
            timeout: 120

    - name: Include default vars
      ansible.builtin.include_vars:
        dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/defaults/"
        extensions:
          - yml

    - name: Include host vars
      ansible.builtin.include_vars:
        file: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/inventory/host_vars/{{ ansible_hostname }}"

    - name: Merge package lists
      ansible.builtin.set_fact:
        packages_merged: "{{ packages_debian + packages_redhat + packages_ubuntu }}"

    - name: Install ssh packages for user testing
      become: true
      ansible.builtin.package:
        name: openssh-server
        state: present

    - name: Reboot time testing
      when:
        - ansible_os_family == "Debian"
      block:
        - name: Set base time and margin for reboot calculation
          ansible.builtin.set_fact:
            reboot_base_time: "{{ automatic_updates.reboot_from_time.split(':') }}"
            reboot_time_margin_mins: "{{ automatic_updates.reboot_time_margin_mins | int }}"

        - name: Calculate random margin
          ansible.builtin.set_fact:
            random_margin: "{{ range(0, (reboot_time_margin_mins | int)) | random }}"

        - name: Calculate total minutes for reboot
          ansible.builtin.set_fact:
            total_minutes: "{{ (reboot_base_time[0] | int) * 60 + (reboot_base_time[1] | int) + (random_margin | int) }}"

        - name: Translates to hours, and minutes
          ansible.builtin.set_fact:
            reboot_hour: "{{ ((total_minutes | int) // 60) % 24 }}"
            reboot_minute: "{{ (total_minutes | int) % 60 }}"

    - name: Set crypto-policies config as fact
      tags:
        - fact
        - crypto-policy
      block:
        - name: Stat crypto-policies config
          ansible.builtin.stat:
            path: /etc/crypto-policies/config
          register: stat_crypto_policies_config

        - name: Set crypto-policies
          ansible.builtin.set_fact:
            crypto_policies_config: "{{ stat_crypto_policies_config.stat.exists }}"

    - name: Set sysctl configuration directory as fact
      block:
        - name: Stat /usr/lib/sysctl.d/ exists
          ansible.builtin.stat:
            path: /usr/lib/sysctl.d/
          register: usr_lib_sysctl_d

        - name: Set sysctl fact
          ansible.builtin.set_fact:
            usr_lib_sysctl_d_dir: "{{ true if usr_lib_sysctl_d.stat.exists else false }}"

    - name: Ensure test groups exists
      become: true
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop:
        - roletestuser
        - testuser01
        - testuser02

    - name: Create test users
      become: true
      ansible.builtin.user:
        name: "{{ item }}"
        group: "{{ item }}"
        shell: /bin/bash
        create_home: true
        generate_ssh_key: true
        ssh_key_bits: "{{ sshd_required_rsa_size }}"
        ssh_key_file: .ssh/id_rsa
        ssh_key_type: rsa
      loop:
        - testuser01
        - testuser02

    - name: Get installed sshd version
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin/
      ansible.builtin.command:
        cmd: sshd -V
      changed_when: false
      failed_when: false
      check_mode: false
      register: sshd_version
      tags:
        - sshd
        - sshd_config

    - name: Set ssh version as fact
      ansible.builtin.set_fact:
        ssh_installed_version: "{{ sshd_version.stderr_lines | regex_search('OpenSSH_([0-9+][0-9+].[0-9+]|[0-9+].[0-9]+)', '\\1') | first }}"
      tags:
        - sshd
        - sshd_config

    - name: Ensure privilege separation directory exists
      become: true
      ansible.builtin.file:
        path: /run/sshd
        owner: root
        group: root
        state: directory
        mode: "0755"
      tags:
        - sshd
        - sshd_config

    - name: Stat IPv6 status
      become: true
      ansible.builtin.stat:
        path: /proc/sys/net/ipv6
      register: stat_ipv6

    - name: Set IPv6 fact
      ansible.builtin.set_fact:
        system_has_ipv6: "{{ stat_ipv6.stat.exists }}"

    - name: Update current facts
      ansible.builtin.setup:

    - name: Ensure snapd is running
      ansible.builtin.shell: |
        set -o pipefail
        snap info snapd | grep snap-id
      args:
        executable: /bin/bash
      register: snapd_running
      changed_when: false
      failed_when: snapd_running.rc != 0
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify rsyslog FileCreateMode
      become: true
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: |
        set -o pipefail
        rsyslogd -N3 -d 2>&1 | grep -o '\$FileCreateMode.*' | awk '{ if ($NF!="{{ rsyslog_filecreatemode }}") exit 1}'
      args:
        executable: /bin/bash
      register: rsyslog_filecreate
      changed_when: false
      failed_when: rsyslog_filecreate.rc != 0
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify auditd
      become: true
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
        - manage_auditd
      block:
        - name: Verify auditd configuration
          ansible.builtin.lineinfile:
            dest: /etc/audit/auditd.conf
            line: "{{ item }}"
            state: present
          check_mode: true
          register: auditd_conf
          failed_when: auditd_conf is changed
          with_items:
            - action_mail_acct = {{ auditd_action_mail_acct }}
            - admin_space_left_action = {{ auditd_admin_space_left_action }}
            - disk_error_action = {{ auditd_disk_error_action }}
            - disk_full_action = {{ auditd_disk_full_action }}
            - flush = {{ auditd_flush }}
            - max_log_file = {{ auditd_max_log_file }}
            - max_log_file_action = {{ auditd_max_log_file_action }}
            - name_format = hostname
            - num_logs = {{ auditd_num_logs }}
            - space_left = {{ auditd_space_left }}
            - space_left_action = {{ auditd_space_left_action }}

        - name: Verify auditd rules
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              auditctl -l | grep "^{{ item }}$"
          changed_when: false
          args:
            executable: /bin/bash
          loop:
            - "-w /sbin/auditctl -p x -k audittools"
            - "-w /usr/bin/sudo -p x -k actions"
            - "-w /etc/localtime -p wa -k localtime"
            - "-w /var/lib/systemd/credential.secret -p wa -k systemd"
            - "-w {{ sysctl_conf_dir }}/zz-ipv6-hardening.conf -p wa -k sysctl"

        - name: Verify auditd settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grep "^{{ item }}$" /etc/audit/audit.rules
          changed_when: false
          args:
            executable: /bin/bash
          loop:
            - "-f {{ auditd_mode | int }}"
            - "-e {{ auditd_enable_flag }}"

    - name: Verify systemd system.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/systemd/system.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: systemd_system_conf
      failed_when: systemd_system_conf is changed
      with_items:
        - DumpCore=no
        - CrashShell=no
        - CtrlAltDelBurstAction=none
        - DefaultLimitCORE=0
        - DefaultLimitNOFILE={{ limit_nofile_hard }}
        - DefaultLimitNPROC={{ limit_nproc_hard }}

    - name: Verify Ctrl-Alt-Del
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Get Ctrl-Alt-Del target status
          ansible.builtin.systemd:
            name: ctrl-alt-del.target
          register: ctrl_alt_del_target

        - name: Verify Ctrl-Alt-Del target LoadState
          ansible.builtin.systemd:
            name: ctrl-alt-del.target
          register: ctrl_alt_del_target
          failed_when:
            - ctrl_alt_del_target.status.LoadState != "masked"
            - not "reboot.target" in ctrl_alt_del_target.status.FragmentPath

    - name: Verify systemd user.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/systemd/user.conf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: systemd_user_conf
      failed_when: systemd_user_conf is changed
      with_items:
        - DefaultLimitCORE=0
        - DefaultLimitNOFILE={{ limit_nofile_hard }}
        - DefaultLimitNPROC={{ limit_nproc_hard }}

    - name: Verify postfix configuration
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/postfix/main.cf
        line: "{{ item }}"
        state: present
      check_mode: true
      register: postfix_conf
      failed_when: postfix_conf is changed
      with_items:
        - disable_vrfy_command = yes
        - inet_interfaces = loopback-only
        - smtpd_banner = \$myhostname - ESMTP
        - smtpd_client_restrictions = permit_mynetworks,reject

    - name: Stat /etc/ssh/sshd_config
      ansible.builtin.stat:
        path: /etc/ssh/sshd_config
      register: sshd_config_file

    - name: Stat /etc/ssh/ssh_config
      ansible.builtin.stat:
        path: /etc/ssh/ssh_config
      register: ssh_config_file

    - name: Stat /etc/ssh/sshd_config.d/01-hardening.conf
      become: true
      ansible.builtin.stat:
        path: /etc/ssh/sshd_config.d/01-hardening.conf
      register: sshd_config_directory

    - name: Assert /etc/ssh/ssh_config permissions
      ansible.builtin.assert:
        that:
          - ssh_config_file.stat.mode == "0644"
        success_msg: "{{ ssh_config_file.stat.path }} has correct permissions: {{ ssh_config_file.stat.mode }}"
        fail_msg: "{{ ssh_config_file.stat.path }} permissions are incorrect: {{ ssh_config_file.stat.mode }}"
      when:
        - ssh_config_file.stat.exists

    - name: Assert /etc/ssh/sshd_config permissions
      ansible.builtin.assert:
        that:
          - sshd_config_file.stat.mode == "0600"
        success_msg: "{{ sshd_config_file.stat.path }} has correct permissions: {{ sshd_config_file.stat.mode }}"
        fail_msg: "{{ sshd_config_file.stat.path }} permissions are incorrect: {{ sshd_config_file.stat.mode }}"
      when:
        - sshd_config_file.stat.exists

    - name: Assert /etc/ssh/sshd_config.d/01-hardening.conf permissions
      ansible.builtin.assert:
        that:
          - sshd_config_directory.stat.mode == "0600"
        success_msg: "{{ sshd_config_directory.stat.path }} has correct permissions: {{ sshd_config_directory.stat.mode }}"
        fail_msg: "{{ sshd_config_directory.stat.path }} permissions are incorrect: {{ sshd_config_directory.stat.mode }}"
      when:
        - sshd_config_directory.stat.exists

    - name: Verify sshd configuration
      when:
        - manage_ssh
      block:
        - name: Verify sshd PermitRootLogin configuration
          become: true
          ansible.builtin.lineinfile:
            dest: /etc/ssh/sshd_config
            line: PermitRootLogin yes
            state: absent
          check_mode: true
          register: sshd_config
          failed_when: sshd_config is changed

        - name: Verify sshd_config.d PermitRootLogin configuration
          become: true
          ansible.builtin.lineinfile:
            dest: /etc/ssh/sshd_config.d/01-hardening.conf
            line: PermitRootLogin yes
            state: absent
          check_mode: true
          register: sshd_config_d
          failed_when: sshd_config_d is changed
          when:
            - sshd_config_directory.stat.exists

        - name: Set sshd_config_parameters
          ansible.builtin.set_fact:
            sshd_config_parameters:
              - "{{ 'AcceptEnv ' + sshd_accept_env if (sshd_accept_env is defined and sshd_accept_env | length != 0)}}"
              - AddressFamily {{ 'inet' if (disable_ipv6 | bool) else 'any' }}
              - AllowGroups {{ sshd_allow_groups | join(' ') }}
              - "{{ 'AllowUsers ' + (sshd_allow_users | join(' ')) if (sshd_allow_users is defined and sshd_allow_users | length != 0) }}"
              - AllowAgentForwarding {{ 'yes' if (sshd_allow_agent_forwarding | bool) else 'no' }}
              - >-
                {%- if (ssh_installed_version is version('6.2', '>=')) -%}
                  {%- if (sshd_allow_tcp_forwarding in ('yes', 'no', 'local', 'all', 'remote')) -%}
                    AllowTcpForwarding {{ sshd_allow_tcp_forwarding }}
                {%- else -%}
                  AllowTcpForwarding {{ 'yes' if (sshd_allow_tcp_forwarding | bool) else 'no' }}
                {%- endif -%}
                {%- else -%}
                  {%- if (sshd_allow_tcp_forwarding in ('yes', 'no')) -%}
                    AllowTcpForwarding {{ sshd_allow_tcp_forwarding }}
                {%- else -%}
                  AllowTcpForwarding {{ 'yes' if (sshd_allow_tcp_forwarding | bool) else 'no' }}
                {%- endif -%}
                {%- endif -%}
              - "{{ 'AuthenticationMethods ' + sshd_authentication_methods if (ssh_installed_version is version('6.2', '>='))}}"
              - Banner {{ sshd_banner if sshd_banner else 'none' }}
              - "{{ 'CASignatureAlgorithms ' + sshd_ca_signature_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
              - "{{ 'Ciphers ' + sshd_ciphers | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
              - ClientAliveCountMax {{ sshd_client_alive_count_max | int }}
              - ClientAliveInterval {{ sshd_client_alive_interval | int }}
              - Compression {{ 'yes' if (sshd_compression | bool) else 'no' }}
              - "{{ 'DebianBanner ' + ('yes' if (sshd_debian_banner | bool) else 'no') if (ansible_os_family == 'Debian')}}"
              - GSSAPIAuthentication {{ 'yes' if (sshd_gssapi_authentication | bool) else 'no' }}
              - GSSAPICleanupCredentials yes
              - HostbasedAuthentication {{ 'yes' if (sshd_hostbased_authentication | bool) else 'no' }}
              - "{{ 'HostKeyAlgorithms ' + sshd_host_key_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
              - IgnoreRhosts {{ 'yes' if (sshd_ignore_rhosts | bool) else 'no' }}
              - IgnoreUserKnownHosts {{ 'yes' if (sshd_ignore_user_known_hosts | bool) else 'no' }}
              - >-
                {%- if ssh_installed_version is version('8.7', '>=') -%}
                  KbdInteractiveAuthentication {{ 'yes' if (sshd_kbd_interactive_authentication | bool) else 'no' }}
                {%- else -%}
                  ChallengeResponseAuthentication {{ 'yes' if (sshd_kbd_interactive_authentication | bool) else 'no' }}
                {%- endif -%}
              - KerberosAuthentication {{ 'yes' if (sshd_kerberos_authentication | bool) else 'no' }}
              - "{{ 'KexAlgorithms ' + sshd_kex_algorithms | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
              - LogLevel {{ sshd_log_level | upper }}
              - LoginGraceTime {{ sshd_login_grace_time | int }}
              - "{{ 'MACs ' + sshd_macs | join(',') if (not crypto_policies_config or not set_crypto_policy)}}"
              - MaxAuthTries {{ sshd_max_auth_tries | int }}
              - MaxSessions {{ sshd_max_sessions | int }}
              - MaxStartups {{ sshd_max_startups }}
              - PasswordAuthentication {{ 'yes' if (sshd_password_authentication | bool) else 'no' }}
              - PermitEmptyPasswords {{ 'yes' if (sshd_permit_empty_passwords | bool) else 'no' }}
              - PermitRootLogin {{ 'yes' if (sshd_permit_root_login | bool) else 'no' }}
              - PermitTunnel {{ 'yes' if (sshd_permit_tunnel | bool) else 'no' }}
              - PermitUserEnvironment {{ 'yes' if (sshd_permit_user_environment | bool) else 'no' }}
              - PrintLastLog {{ 'yes' if (sshd_print_last_log | bool) else 'no' }}
              - PrintMotd {{ 'yes' if (sshd_print_motd | bool) else 'no' }}
              - "{{ 'Protocol 2' if (ssh_installed_version is version('7.6', '<'))}}"
              - PubkeyAuthentication yes
              - RekeyLimit {{ sshd_rekey_limit }}
              - "{{ 'RequiredRSASize ' + (sshd_required_rsa_size | string) if (ssh_installed_version is version('9.1', '>') and (not crypto_policies_config or not set_crypto_policy)) }}" # noqa: yaml[line-length]
              - StrictModes {{ 'yes' if (sshd_strict_modes | bool) else 'no' }}
              - "{{ 'Subsystem sftp ' + sshd_sftp_subsystem if (sshd_sftp_enabled | bool)}}"
              - SyslogFacility {{ sshd_syslog_facility | upper }}
              - TCPKeepAlive {{ 'yes' if (sshd_tcp_keep_alive | bool) else 'no' }}
              - UseDNS {{ 'yes' if (sshd_use_dns | bool) else 'no' }}
              - "{{ 'UseLogin no' if (ssh_installed_version is version('7.4', '<'))}}"
              - UsePAM {{ 'yes' if (sshd_use_pam | bool) else 'no' }}
              - >-
                {%- if ssh_installed_version is version('7.5', '<') -%}
                  {%- if sshd_use_privilege_separation in ('yes', 'no', 'sandbox') -%}
                    UsePrivilegeSeparation {{ sshd_use_privilege_separation }}
                {%- else -%}
                  UsePrivilegeSeparation {{ 'yes' if (sshd_use_privilege_separation | bool) else 'no' }}
                {%- endif -%}
                {%- endif -%}
              - X11Forwarding {{ 'yes' if (sshd_x11_forwarding | bool) else 'no' }}
              - X11UseLocalhost yes

        - name: Set repeating parameters and clear empty values in sshd_config_parameters
          vars:
            _hostkey: "{{ ['HostKey '] | product(sshd_host_keys_files) | map('join') | list }}"
            _listenaddress: "{{ ['ListenAddress '] | product(sshd_listen) | map('join') | list }}"
            _port: "{{ ['Port '] | product(sshd_ports) | map('join') | list }}"
          ansible.builtin.set_fact:
            sshd_config_parameters: "{{ (sshd_config_parameters + _hostkey + _listenaddress + _port) | select() }}"

        - name: Verify sshd configuration
          become: true
          ansible.builtin.lineinfile:
            dest: /etc/ssh/sshd_config
            line: "{{ item }}"
            state: present
          check_mode: true
          register: sshd_config
          failed_when: sshd_config is changed
          loop: "{{ sshd_config_parameters }}"
          when:
            - not sshd_config_directory.stat.exists

        - name: Verify sshd config.d configuration
          become: true
          ansible.builtin.lineinfile:
            dest: /etc/ssh/sshd_config.d/01-hardening.conf
            line: "{{ item }}"
            state: present
          check_mode: true
          register: sshd_config
          failed_when: sshd_config is changed
          loop: "{{ sshd_config_parameters }}"
          when:
            - sshd_config_directory.stat.exists

        - name: Set parameters for runtime check
          ansible.builtin.set_fact:
            sshd_config_parameters_runtime: >-
              {{
                sshd_config_parameters_runtime | default([]) +
                [(item.split(' ')[0] | lower) + ' ' + (item.split(' ')[1:] | join(' '))]
              }}
          loop: "{{ sshd_config_parameters }}"

        - name: Set multiple parameters in runtime checking
          ansible.builtin.set_fact:
            sshd_config_parameters_runtime: >-
              {{
                ( sshd_config_parameters_runtime | reject('regex', '^' + item + ' ') | list ) +
                ( [item + ' '] |
                  product( sshd_config_parameters_runtime |
                           select('match', '^' + item + ' ') |
                           map('split', ' ', 1) |
                           map('last') |
                           map('split', ' ') |
                           unique |
                           flatten ) |
                  map('join') | list )
              }}
          loop:
            - allowgroups
            - acceptenv

        - name: Ignore parameters for runtime check
          ansible.builtin.set_fact:
            sshd_config_parameters_runtime: "{{ (sshd_config_parameters_runtime | reject('regex', '^' + item + ' ') | list) }}"
          loop:
            # debianbanner: not show in runtime.
            - debianbanner
            # listenaddress: runtime returns values addresses and ports(Ex: 0.0.0.0:22), ports is optional and can have multiple values.
            - listenaddress
            # rekeylimit: runtime returns values only in bytes and seconds, having to treat these values would be a lot of work.
            - rekeylimit

        - name: Verify sshd runtime configuration
          become: true
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          ansible.builtin.command:
            cmd: sshd -T
          check_mode: false
          register: sshd_config
          changed_when: false
          failed_when: item not in sshd_config.stdout_lines
          loop: "{{ sshd_config_parameters_runtime }}"

        - name: Verify ssh client configuration
          become: true
          ansible.builtin.lineinfile:
            dest: /etc/ssh/ssh_config
            line: "    {{ item }}"
            state: present
          check_mode: true
          register: ssh_config
          failed_when: ssh_config is changed
          loop:
            - GSSAPIAuthentication {{ 'yes' if (sshd_gssapi_authentication | bool) else 'no' }}
            - HashKnownHosts yes
            - RekeyLimit {{ sshd_rekey_limit }}

    - name: Print sysctl configuration directory
      ansible.builtin.debug:
        msg: "{{ sysctl_conf_dir }}"

    - name: Merge sysctl settings
      ansible.builtin.set_fact:
        sysctl_settings: "{{ generic_sysctl_settings | combine(ipv4_sysctl_settings) }}"

    - name: Merge Apparmor sysctl settings
      ansible.builtin.set_fact:
        sysctl_settings: "{{ sysctl_settings | combine(apparmor_sysctl_settings) }}"
      when:
        - manage_apparmor
        - ansible_os_family == "Debian"
        - ansible_kernel is version("6.2", ">=")

    - name: Verify sysctl configuration
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        /lib/systemd/systemd-sysctl --cat-config | grep "^{{ item.key }}.*{{ item.value }}$"
      args:
        executable: /bin/bash
      with_dict: "{{ sysctl_settings | dict2items | rejectattr('key', 'search', 'nf_conntrack') | items2dict }}"
      register: sysctl_file_config
      changed_when: false
      failed_when: sysctl_file_config.rc != 0
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify sysctl runtime configuration
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        sysctl -a | grep "^{{ item.key }}.*{{ item.value }}$"
      args:
        executable: /bin/bash
      with_dict: "{{ sysctl_settings | dict2items | rejectattr('key', 'search', 'nf_conntrack') | items2dict }}"
      register: sysctl_runtime_config
      changed_when: false
      failed_when: sysctl_runtime_config.rc != 0
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Get crypto-policies value
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell:
        cmd: grep "^{{ crypto_policy | upper }}$" /etc/crypto-policies/config
      register: crypto_policy_set
      changed_when: false
      failed_when: crypto_policy_set.rc != 0
      when:
        - crypto_policies_config

    - name: Verify mounts
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Verify noexec /dev/shm
          ansible.builtin.shell:
            cmd: grep '^tmpfs\s/dev/shm.*noexec' /proc/mounts
          register: dev_shm_noexec
          changed_when: false
          failed_when: dev_shm_noexec.rc != 0

        - name: Verify /proc hidepid
          ansible.builtin.shell: |
            set -o pipefail
            grep -E '^proc\s/proc proc rw,nosuid,nodev,noexec,relatime.*hidepid=({{ hide_pid }}|invisible)' /proc/mounts
          args:
            executable: /bin/bash
          register: proc_opts
          changed_when: false
          failed_when: proc_opts.rc != 0
          tags:
            - skip_ansible_lint

        - name: Verify /proc process group
          ansible.builtin.shell: |
            set -o pipefail
            grep -E '^proc\s/proc proc rw,nosuid,nodev,noexec.*gid={{ process_group }}' /proc/mounts
          args:
            executable: /bin/bash
          register: proc_opts
          changed_when: false
          failed_when: proc_opts.rc != 0
          when:
            - process_group != 0
          tags:
            - skip_ansible_lint

        - name: Verify tmp.mount
          become: true
          ansible.builtin.systemd:
            name: tmp.mount
          register: tmp_mount
          changed_when: false
          failed_when: not 'nosuid,nodev,noexec' in tmp_mount.status.Options

        - name: Verify /tmp
          become: true
          ansible.builtin.shell:
            cmd: grep '^tmpfs\s/tmp\s.*nosuid,nodev,noexec' /proc/mounts
          register: mounts_tmp
          changed_when: false
          failed_when: mounts_tmp.rc != 0

    - name: Get PAM version
      tags:
        - fact
        - common-account
        - common-auth
        - pam
      block:
        - name: Gather package facts
          ansible.builtin.package_facts:

        - name: Get libpam version in Debian family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['libpam-modules'][0].version }}"
          when:
            - ansible_os_family == "Debian"
            - "'libpam-modules' in ansible_facts.packages"

        - name: Get libpam version in RedHat family
          ansible.builtin.set_fact:
            pam_version: "{{ ansible_facts.packages['pam'][0].version }}"
          when:
            - ansible_os_family == "RedHat"
            - "'pam' in ansible_facts.packages"

    - name: Set hashing algorithm for password (yescrypt|sha512)
      ansible.builtin.set_fact:
        password_algorithm: "{{ 'yescrypt' if (pam_version is version('1.4.0', '>=')) else 'sha512' }}"
      tags:
        - fact
        - pam
        - CIS-UBUNTU2204-5.4.4
        - M1041

    - name: Verify login.defs settings
      become: true
      ansible.builtin.shell: grep "^{{ item }}$" /etc/login.defs
      register: login_defs
      changed_when: false
      failed_when: login_defs.rc != 0
      with_items:
        - ENCRYPT_METHOD {{ password_algorithm | upper }}
        - FAILLOG_ENAB yes
        - LOG_OK_LOGINS yes
        - LOGIN_RETRIES {{ login_defs.login_retries }}
        - LOGIN_TIMEOUT {{ login_defs.login_timeout }}
        - PASS_MAX_DAYS {{ login_defs.pass_max_days }}
        - PASS_MIN_DAYS {{ login_defs.pass_min_days }}
        - PASS_WARN_AGE {{ login_defs.pass_warn_age }}
        - SHA_CRYPT_MAX_ROUNDS 65536
        - SHA_CRYPT_MIN_ROUNDS 10000
        - SU_NAME su
        - SYSLOG_SG_ENAB yes
        - SYSLOG_SU_ENAB yes
        - UMASK {{ umask_value }}

    - name: Set pwquality_parameters
      ansible.builtin.set_fact:
        pwquality_parameters:
          - dcredit = {{ pwquality.dcredit }}
          - dictcheck = {{ '1' if pwquality.dictcheck else '0' }}
          - >-
            {%- if pwquality.dictpath != "" -%}
              dictpath = {{ pwquality.dictpath }}
            {%- endif -%}
          - difok = {{ pwquality.difok }}
          - >-
            {%- if (pwquality.enforce_for_root | bool) -%}
              enforce_for_root
            {%- endif -%}
          - enforcing = {{ '1' if pwquality.enforcing else '0' }}
          - gecoscheck = {{ '1' if pwquality.gecoscheck else '0' }}
          - lcredit = {{ pwquality.lcredit }}
          - >-
            {%- if (pwquality.local_users_only | bool) -%}
              local_users_only
            {%- endif -%}
          - maxclassrepeat = {{ pwquality.maxclassrepeat }}
          - maxrepeat = {{ pwquality.maxrepeat }}
          - minclass = {{ pwquality.minclass }}
          - minlen = {{ pwquality.minlen }}
          - ocredit = {{ pwquality.ocredit }}
          - retry = {{ pwquality.retry }}
          - ucredit = {{ pwquality.ucredit }}
          - usercheck = {{ '1' if pwquality.usercheck else '0' }}
          - usersubstr = {{ pwquality.usersubstr }}

    - name: Verify pwquality.conf settings
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/security/pwquality.conf
        mode: "0644"
        state: present
        line: "{{ item }}"
      check_mode: true
      register: verify_pwquality
      failed_when: verify_pwquality is changed
      loop: "{{ pwquality_parameters | select() }}"
      when:
        - manage_pwquality

    - name: Verify GRUB settings
      become: true
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Verify RedHat GRUB audit settings
          ansible.builtin.shell: |
            set -o pipefail
            grubby --info="/boot/vmlinuz-$(uname -r)" | grep "^args.*{{ grub_audit_cmdline }} {{ grub_audit_backlog_cmdline }}"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"
            - manage_auditd

        - name: Verify Debian audit GRUB settings
          ansible.builtin.shell:
            cmd: grep "linux.*{{ grub_audit_cmdline }} {{ grub_audit_backlog_cmdline }}" /boot/grub/grub.cfg
          register: audit_grub_cfg
          changed_when: false
          failed_when: audit_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"
            - manage_auditd

        - name: Verify RedHat GRUB IPv6 settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grubby --info="/boot/vmlinuz-$(uname -r)" | grep "ipv6.disable=1"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"
            - disable_ipv6

        - name: Verify Debian GRUB IPv6 settings
          ansible.builtin.shell:
            cmd: grep "linux.*ipv6.disable=1" /boot/grub/grub.cfg
          register: audit_grub_cfg
          changed_when: false
          failed_when: audit_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"
            - disable_ipv6

        - name: Verify RedHat GRUB virtual system call settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grubby --info="/boot/vmlinuz-$(uname -r)" | grep "vsyscall=none"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"
            - not allow_virtual_system_calls

        - name: Verify Debian GRUB virtual system call settings
          ansible.builtin.shell:
            cmd: grep "linux.*vsyscall=none" /boot/grub/grub.cfg
          register: page_grub_cfg
          changed_when: false
          failed_when: page_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"
            - not allow_virtual_system_calls

        - name: Verify RedHat GRUB page poisoning settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grubby --info="/boot/vmlinuz-$(uname -r)" | grep "page_poison=1"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"
            - enable_page_poisoning

        - name: Verify Debian GRUB page poisoning settings
          ansible.builtin.shell:
            cmd: grep "linux.*page_poison=1" /boot/grub/grub.cfg
          register: page_grub_cfg
          changed_when: false
          failed_when: page_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"
            - enable_page_poisoning

        - name: Verify RedHat GRUB page table isolation settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grubby --info="/boot/vmlinuz-$(uname -r)" | grep "pti={{ 'on' if page_table_isolation else 'auto' }}"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"

        - name: Verify Debian GRUB page table isolation settings
          ansible.builtin.shell:
            cmd: grep "linux.*pti={{ 'on' if page_table_isolation else 'auto' }}" /boot/grub/grub.cfg
          register: page_grub_cfg
          changed_when: false
          failed_when: page_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"

        - name: Verify RedHat GRUB SLUB debugger settings
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              grubby --info="/boot/vmlinuz-$(uname -r)" | grep "slub_debug=P"
          register: audit_grubenv
          changed_when: false
          failed_when: audit_grubenv.rc != 0
          when:
            - ansible_os_family == "RedHat"
            - slub_debugger_poisoning

        - name: Verify Debian GRUB SLUB debugger settings
          ansible.builtin.shell:
            cmd: grep "linux.*slub_debug=P" /boot/grub/grub.cfg
          register: page_grub_cfg
          changed_when: false
          failed_when: page_grub_cfg.rc != 0
          when:
            - ansible_os_family == "Debian"
            - slub_debugger_poisoning

    - name: IPv6 sysctl configuration
      become: true
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Verify IPv6 sysctl configuration
          ansible.builtin.shell: |
            set -o pipefail
            /lib/systemd/systemd-sysctl --cat-config | grep "^{{ item }}$"
          args:
            executable: /bin/bash
          register: sysctl_ipv6_config
          changed_when: false
          failed_when: sysctl_ipv6_config.rc != 0
          with_items:
            - net.ipv6.conf.all.disable_ipv6 = 1
            - net.ipv6.conf.default.disable_ipv6 = 1
          when:
            - disable_ipv6

        - name: Verify IPv6 sysctl runtime configuration
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          ansible.builtin.shell: |
            set -o pipefail
            sysctl -a | grep "^{{ item.key }}.*{{ item.value | int }}$"
          args:
            executable: /bin/bash
          with_dict: "{{ ipv6_disable_sysctl_settings }}"
          register: sysctl_ipv6
          changed_when: false
          failed_when: sysctl_ipv6.rc != 0
          when:
            - system_has_ipv6
            - disable_ipv6

    - name: Find GRUB config files
      become: true
      ansible.builtin.find:
        paths: /boot
        patterns: "*.cfg,grubenv"
        recurse: true
      register: perm_grub_cfg

    - name: Verify GRUB config files permission
      become: true
      ansible.builtin.stat:
        path: "{{ item.path }}"
      changed_when: false
      failed_when: item.mode | int > 644
      with_items:
        - "{{ perm_grub_cfg.files | reject('search', '/boot/efi/EFI/.*/grub.cfg') | list }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Verify systemd resolved.conf
      become: true
      ansible.builtin.shell:
        cmd: grep "^{{ item }}$" /etc/systemd/resolved.conf
      register: systemd_resolved_conf
      changed_when: false
      failed_when: systemd_resolved_conf.rc != 0
      with_items:
        - DNS={{ dns | join(' ') }}
        - FallbackDNS={{ fallback_dns | join(' ') }}
        - DNSSEC={{ dnssec }}
        - DNSOverTLS={{ dns_over_tls }}
      when:
        - manage_resolved
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify systemd timesyncd.conf
      become: true
      ansible.builtin.shell:
        cmd: grep "^{{ item }}$" /etc/systemd/timesyncd.conf
      register: systemd_timesyncd_conf
      changed_when: false
      failed_when: systemd_timesyncd_conf.rc != 0
      with_items:
        - NTP={{ ntp | join(' ') }}
        - FallbackNTP={{ fallback_ntp | join(' ') }}
      when:
        - manage_timesyncd
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Stat /etc/default/motd-news
      ansible.builtin.stat:
        path: /etc/default/motd-news
      register: motd_news

    - name: Verify masked motdnews service
      become: true
      ansible.builtin.systemd:
        name: motd-news.service
        masked: true
        enabled: false
        state: stopped
      check_mode: true
      register: motdnews_service
      failed_when: motdnews_service is changed
      when:
        - ansible_os_family == "Debian"
        - motd_news.stat.exists
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Stat /usr/bin/pro
      ansible.builtin.stat:
        path: /usr/bin/pro
      register: ubuntu_advantage_pro
      when:
        - ansible_os_family == "Debian"

    - name: Verify that apt_news is disabled
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        pro config show | grep '^apt_news.*False'
      args:
        executable: /bin/bash
      register: ubuntu_advantage_pro_state
      changed_when: false
      failed_when: ubuntu_advantage_pro_state.rc != 0
      when:
        - ansible_os_family == "Debian"
        - ubuntu_advantage_pro.stat.exists

    - name: Stat apt ESM hook
      ansible.builtin.stat:
        path: /etc/apt/apt.conf.d/20apt-esm-hook.conf
      register: ubuntu_esm_hook
      failed_when: ubuntu_esm_hook.stat.exists
      when:
        - ansible_os_family == "Debian"

    - name: Verify apt settings
      ansible.builtin.shell: |
        set -o pipefail
        apt-config dump | grep '^{{ item }}'
      register: apt_config_settings
      changed_when: false
      failed_when: apt_config_settings.rc != 0
      args:
        executable: /bin/bash
      when:
        - ansible_os_family == "Debian"
      with_items:
        - "{{ apt_hardening_options }}"

    - name: Efi fact
      ansible.builtin.set_fact:
        booted_with_efi: "{{ ansible_mounts | selectattr('mount', 'equalto', '/boot/efi') | list | length > 0 }}"

    - name: Print packages
      ansible.builtin.debug:
        msg: "{{ packages_merged }}"

    - name: Verify cracklib
      when:
        - '"cracklib" in packages_merged'
        - '"cracklib-runtime" in packages_merged'
      block:
        - name: Update Debian cracklib
          become: true
          ansible.builtin.shell: |
            update-cracklib
          register: update_debian_cracklib
          changed_when: update_debian_cracklib.rc == 0
          failed_when: update_debian_cracklib.rc != 0
          when:
            - ansible_os_family == "Debian"

        - name: Update RedHat cracklib
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          become: true
          ansible.builtin.command:
            cmd: create-cracklib-dict /usr/share/dict/*
          register: update_redhat_cracklib
          changed_when: update_redhat_cracklib.rc == 0
          failed_when: update_redhat_cracklib.rc != 0
          when:
            - ansible_os_family == "RedHat"

        - name: Verify cracklib password list
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          ansible.builtin.shell: |
            set -o pipefail
            grep '/usr/share/dict/passwords' /var/cache/cracklib/src-dicts
          args:
            executable: /bin/bash
          register: cracklib_passwords
          changed_when: false
          failed_when: cracklib_passwords.rc != 0
          when:
            - ansible_os_family == "Debian"

    - name: Verify username password list
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.shell: |
        set -o pipefail
        grep "{{ ansible_user | default(lookup('ansible.builtin.env', 'USER')) }}" /usr/share/dict/passwords.local
      args:
        executable: /bin/bash
      register: username_passwords
      changed_when: false
      failed_when: username_passwords.rc != 0
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Kernel modules
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Index blacklisted kernel modules
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          ansible.builtin.shell: |
            set -o pipefail
            modprobe -c | grep -o '^blacklist .*' | awk '{print $2}'
          args:
            executable: /bin/bash
          changed_when: false
          failed_when: modprobe_blacklist.rc != 0
          register: modprobe_blacklist

        - name: Verify blocked blacklisted kernel modules
          environment:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          ansible.builtin.shell: |
            set -o pipefail
            grep 'install {{ item }} /bin/true' /etc/modprobe.d/blacklist-blocked.conf
          args:
            executable: /bin/bash
          register: modprobe_blockblacklisted
          changed_when: false
          failed_when: modprobe_blockblacklisted.rc != 0
          with_items:
            - "{{ modprobe_blacklist.stdout_lines | sort | unique }}"

    - name: Verify sudo settings
      ansible.builtin.shell: |
        set -o pipefail
        sudo -l | grep "{{ item }}"
      register: sudo_settings
      changed_when: false
      failed_when: sudo_settings.rc != 0
      args:
        executable: /bin/bash
      with_items:
        - use_pty
        - logfile="/var/log/sudo.log"
        - "!pwfeedback"
        - "!visiblepw"
        - passwd_timeout=1
        - timestamp_timeout=5
        - timestamp_type=tty
        - "!rootpw"
        - "!runaspw"
        - "!targetpw"

    - name: Stat faillock.conf
      become: true
      ansible.builtin.stat:
        path: /etc/security/faillock.conf
      register: faillockconf

    - name: Set faillock_parameters
      ansible.builtin.set_fact:
        faillock_parameters:
          - dir={{ faillock.dir }}
          - "{{ 'audit' if (faillock.audit | bool) }}"
          - "{{ 'silent' if (faillock.silent | bool) }}"
          - "{{ 'no_log_info' if (faillock.no_log_info | bool) }}"
          - "{{ 'local_users_only' if (faillock.local_users_only | bool) }}"
          - >-
            {%- if (pam_version is version('1.5.1', '>=')) -%}
              {{ 'nodelay' if (faillock.nodelay | bool) }}
            {%- endif -%}
          - deny={{ faillock.deny }}
          - fail_interval={{ faillock.fail_interval }}
          - unlock_time={{ faillock.unlock_time }}
          - "{{ 'even_deny_root' if (faillock.even_deny_root | bool) }}"
          - root_unlock_time={{ faillock.root_unlock_time }}
          - >-
            {%- if faillock.admin_group is defined and faillock.admin_group | length > 0 -%}
              admin_group={{ faillock.admin_group }}
            {%- endif -%}
      when:
        - faillockconf.stat.exists

    - name: Verify faillock.conf
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/security/faillock.conf
        mode: "0644"
        state: present
        line: "{{ item }}"
      check_mode: true
      register: verify_faillock
      failed_when: verify_faillock is changed
      loop: "{{ faillock_parameters | select() }}"
      when:
        - faillockconf.stat.exists

    - name: Verify wireless state
      environment:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ansible.builtin.command:
        cmd: nmcli -t radio
      register: wireless_state
      changed_when: not 'disabled' in wireless_state.stdout
      failed_when: not 'disabled' in wireless_state.stdout
      when:
        - disable_wireless
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify AIDE configuration
      become: true
      when:
        - manage_aide
      block:
        - name: Get AIDE include config
          ansible.builtin.command:
            cmd: grep -m1 -E "^@@(x_include|include) \/" "{{ '/etc/aide/aide.conf' if ansible_os_family == 'Debian' else '/etc/aide.conf' }}"
          register: grep_aide_include
          changed_when: false
          failed_when: false
          check_mode: false

        - name: Debug AIDE include grep
          ansible.builtin.debug:
            msg: "{{ grep_aide_include }}"

        - name: Set AIDE include as fact
          ansible.builtin.set_fact:
            aide_include_d: "{{ 'false' if grep_aide_include.rc != 0 else grep_aide_include.stdout.split()[1] }}"

        - name: Debug AIDE include path
          ansible.builtin.debug:
            msg: "{{ aide_include_d }}"

        - name: Check if AIDE include directory exits
          ansible.builtin.stat:
            path: "{{ aide_include_d }}"
          register: aide_config_d

        - name: AIDE config check
          become: true
          ansible.builtin.command:
            cmd: aide --config-check --config="{{ '/etc/aide/aide.conf' if ansible_os_family == 'Debian' else '/etc/aide.conf' }}"
          register: aide_config
          changed_when: false
          failed_when: aide_config.rc != 0

        - name: Verify AIDE settings
          ansible.builtin.shell: |
            set -o pipefail
            grep "^{{ item }}$" "{{ '/etc/aide/aide.conf' if ansible_os_family == 'Debian' else '/etc/aide.conf' }}"
          register: aide_settings
          changed_when: false
          failed_when: aide_settings.rc != 0
          args:
            executable: /bin/bash
          with_items:
            - /usr/sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/audispd p+i+n+u+g+s+b+acl+xattrs+sha512
            - "!/var/lib/docker"
            - "!/var/lib/lxcfs"
            - "!/var/lib/private/systemd"
            - "!/var/log/audit"
            - "!/var/log/journal"
          when:
            - not aide_config_d.stat.exists

        - name: Verify AIDE settings as includes
          ansible.builtin.shell: |
            set -o pipefail
            grep "^{{ item }}$" {{ aide_include_d }}/99_*
          register: aide_settings
          changed_when: false
          failed_when: aide_settings.rc != 0
          args:
            executable: /bin/bash
          with_items:
            - /usr/sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
            - /usr/sbin/audispd p+i+n+u+g+s+b+acl+xattrs+sha512
            - "!/var/lib/docker"
            - "!/var/lib/lxcfs"
            - "!/var/lib/private/systemd"
            - "!/var/log/audit"
            - "!/var/log/journal"
          when:
            - aide_config_d.stat.exists

    - name: Create hash password
      block:
        - name: Install mkpasswd RedHat family
          become: true
          ansible.builtin.package:
            name: mkpasswd
          when:
            - password_algorithm == "yescrypt"
            - ansible_os_family == "RedHat"
            - ansible_distribution_major_version | int >= 9

        - name: Install mkpasswd Debian family
          become: true
          ansible.builtin.package:
            name: whois
          when:
            - password_algorithm == "yescrypt"
            - ansible_os_family == "Debian"

        - name: Create yescrypt password hash
          ansible.builtin.shell: |
            set -o pipefail
            echo -n 'Ansible Role Test User' | mkpasswd --stdin --method=yescrypt --rounds=8
          args:
            executable: /bin/bash
          register: mkpasswd
          changed_when: false
          failed_when: mkpasswd.rc != 0
          when:
            - password_algorithm == "yescrypt"

        - name: Set password
          ansible.builtin.set_fact:
            password: "{{ mkpasswd.stdout }}"
          when:
            - password_algorithm == "yescrypt"

        - name: Create sha512 password hash
          vars:
            salt: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"
          ansible.builtin.set_fact:
            password: "{{ 'Ansible Role Test User' | password_hash('sha512', salt, rounds=656000) }}"
          when:
            - password_algorithm == "sha512"

        - name: Print password
          ansible.builtin.debug:
            msg: "{{ password }}"
          when:
            - password

    - name: Create test user
      become: true
      ansible.builtin.user:
        name: roletestuser
        group: roletestuser
        password: "{{ password }}"
        state: present
        shell: /bin/bash

    - name: Get test user password
      become: true
      ansible.builtin.command:
        cmd: grep roletestuser /etc/shadow
      register: roletestuser_pass
      changed_when: false
      failed_when: roletestuser_pass.rc != 0

    - name: Print test user
      ansible.builtin.debug:
        msg: "{{ roletestuser_pass.stdout }}"

    - name: Stat ssh moduli
      ansible.builtin.stat:
        path: /etc/ssh/moduli
      register: ssh_moduli

    - name: Print ssh moduli checksum
      ansible.builtin.debug:
        msg: "{{ ssh_moduli.stat.checksum }}"

    - name: Verify TMOUT setting
      ansible.builtin.shell: |
        set -o pipefail
        grep "^declare -irx TMOUT={{ session_timeout }}$" /etc/profile
      args:
        executable: /bin/bash
      register: declare_tmout
      changed_when: false
      failed_when: declare_tmout.rc != 0
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
        - ansible_systemd.version | int < 252

    - name: Assert compiler permissions
      when:
        - manage_compilers
      block:
        - name: Stat available compilers
          ansible.builtin.find:
            paths: [/usr/local/sbin, /usr/local/bin, /usr/sbin, /usr/bin, /sbin, /bin, /snap/bin]
            patterns: "{{ compilers }}"
            file_type: any
            follow: true
          register: compiler

        - name: Check file ownership
          ansible.builtin.stat:
            path: "{{ item.path }}"
            follow: true
          register: file_stat
          with_items:
            - "{{ compiler.files }}"

        - name: Assert compiler ownership, group, mode, and state
          ansible.builtin.assert:
            that:
              - item.stat.exists
              - item.stat.mode == '0750'
              - item.stat.uid == 0
              - item.stat.gid == 0
            fail_msg: File {{ item.stat.path }} does not have the expected permissions.
          with_items:
            - "{{ file_stat.results }}"
          when:
            - not item.stat.islnk
            - not item.stat.mimetype == "inode/symlink"

    - name: Verify journald settings
      ansible.builtin.shell:
        cmd: grep "^{{ item }}$" /etc/systemd/journald.conf
      register: journald_conf
      changed_when: false
      failed_when: journald_conf.rc != 0
      with_items:
        - Storage={{ journald_storage }}
        - ForwardToSyslog={{ 'yes' if journald_forwardtosyslog else 'no' }}
        - Compress={{ 'yes' if journald_compress else 'no' }}

    - name: Verify logind settings
      ansible.builtin.shell: |
        set -o pipefail
        systemd-analyze cat-config systemd/logind.conf | grep "^{{ item }}"
      args:
        executable: /bin/bash
      register: logind_conf
      changed_when: false
      failed_when: logind_conf.rc != 0
      with_items:
        - KillUserProcesses={{ 'true' if logind.killuserprocesses else 'false' }}
        - KillExcludeUsers={{ logind.killexcludeusers | join(' ') }}
        - IdleAction={{ logind.idleaction }}
        - IdleActionSec={{ logind.idleactionsec }}
        - RemoveIPC={{ 'true' if logind.removeipc else 'false' }}
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Verify StopIdleSessionSec setting
      ansible.builtin.shell: |
        set -o pipefail
        systemd-analyze cat-config systemd/logind.conf | grep "^{{ item }}"
      args:
        executable: /bin/bash
      register: stopidlesession
      changed_when: false
      failed_when: stopidlesession.rc != 0
      with_items:
        - StopIdleSessionSec={{ session_timeout }}
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]
        - ansible_systemd.version | int >= 252

    - name: Verify journal permissions
      become: true
      block:
        - name: Verify tmpfiles settings
          ansible.builtin.shell:
            cmd: grep -E "^z /var/log/journal {{ journald_permissions }} {{ journald_user }} {{ journald_group }} - -$" /etc/tmpfiles.d/systemd.conf
          register: journal_tmpfiles
          changed_when: false
          failed_when:
            - journal_tmpfiles.rc != 0
          when:
            - ansible_virtualization_type not in ["container", "docker", "podman"]

        - name: Find journal directories
          become: true
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              find /run/log/journal /var/log/journal -type d -printf "%m %p %CY%Cm%Cd\n" | awk '$1 > "2640" {print $0}'
          args:
            executable: /bin/bash
          changed_when: false
          register: journal_dirs_find
          failed_when:
            - journal_dirs_find.rc != 0
            - "'No such file or directory' not in journal_dirs_find.stderr"

        - name: Return directories with incorrect permissions
          ansible.builtin.debug:
            msg: "{{ journal_dirs_find.stdout_lines }} - {{ journal_dirs_find.stdout_lines | length }}"
          when:
            - journal_dirs_find.stdout_lines | length > 0

        - name: Find journal files
          become: true
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              find /run/log/journal /var/log/journal -type f -printf "%m %p %CY%Cm%Cd\n" | awk '$1 > "644" {print $0}'
          args:
            executable: /bin/bash
          register: journal_file_find
          changed_when: false
          failed_when:
            - journal_file_find.rc != 0
            - "'No such file or directory' not in journal_file_find.stderr"

        - name: Return files with incorrect permissions
          ansible.builtin.debug:
            msg: "{{ journal_file_find.stdout_lines }} - {{ journal_file_find.stdout_lines | length }}"
          when:
            - journal_file_find.stdout_lines | length > 0

    - name: Verify kernel lockdown
      when:
        - ansible_kernel is version("5.4", ">=")
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Set kernel lockdown mode if defined
          ansible.builtin.set_fact:
            kernel_lockdown: >-
              {% if kernel_lockdown == "integrity" %}
                integrity
              {% elif kernel_lockdown == "confidentiality" %}
                confidentiality
              {% elif kernel_lockdown %}
                integrity
              {% endif %}
          when:
            - kernel_lockdown is defined
            - kernel_lockdown is not false

        - name: Set kernel lockdown mode if not defined or false
          ansible.builtin.set_fact:
            kernel_lockdown: none
          when:
            - kernel_lockdown is not defined or kernel_lockdown is false

        - name: Verify kernel lockdown
          become: true
          ansible.builtin.command:
            cmd: grep "\[{{ kernel_lockdown | trim }}\]"  /sys/kernel/security/lockdown
          register: kernel_lockdown
          changed_when: false
          failed_when: kernel_lockdown.rc != 0

        - name: Print kernel lockdown
          ansible.builtin.debug:
            msg: "{{ kernel_lockdown.stdout }}"

    - name: Verify netplan files permissions
      become: true
      block:
        - name: Find all netplan configuration files
          ansible.builtin.find:
            paths:
              - /etc/netplan
              - /lib/netplan
              - /run/netplan
            recurse: true
            patterns: "*.yaml"
          register: netplan_configuration

        - name: Assert netplan files permissions
          ansible.builtin.assert:
            that:
              - item.mode == "0600"
            success_msg: "{{ item.path }} has correct permissions: {{ item.mode }}"
            fail_msg: "{{ item.path }} permissions are incorrect: {{ item.mode }}"
          with_items:
            - "{{ netplan_configuration.files }}"

    - name: Verify unattended-upgrades reboot settings
      ansible.builtin.shell: |
        set -o pipefail
        apt-config dump | grep -Eo '^{{ item }}$'
      args:
        executable: /bin/bash
      register: unattended_upgrades
      changed_when: false
      failed_when: unattended_upgrades.rc != 0
      loop:
        - Unattended-Upgrade::Automatic-Reboot "true";
        - Unattended-Upgrade::Automatic-Reboot-Time "02:00";
      when:
        - ansible_os_family == "Debian"
        - automatic_updates.enabled
        - automatic_updates.reboot

    - name: Verify unattended-upgrades settings
      ansible.builtin.shell: |
        set -o pipefail
        apt-config dump | grep -Eo '^{{ item }}$'
      args:
        executable: /bin/bash
      register: unattended_upgrades
      changed_when: false
      failed_when: unattended_upgrades.rc != 0
      loop:
        - APT::Periodic::AutocleanInterval "7";
        - APT::Periodic::Unattended-Upgrade "1";
        - APT::Periodic::Update-Package-Lists "1";
        - Unattended-Upgrade::.*-[s|S]ecurity";
      when:
        - ansible_os_family == "Debian"
        - automatic_updates.enabled

    - name: Verify UFW
      become: true
      when:
        - manage_ufw
        - ansible_virtualization_type not in ["container", "docker", "podman"]
      block:
        - name: Get UFW status
          become: true
          ansible.builtin.command:
            cmd: ufw status verbose
          changed_when: false
          register: ufw_status
          failed_when: >
            'deny (incoming)' not in ufw_status.stdout or
            'deny (outgoing)' not in ufw_status.stdout or
            'disabled (routed)' not in ufw_status.stdout

        - name: Get UFW outgoing rules
          ansible.builtin.shell: |
            set -o pipefail
            ufw status verbose | grep -E "([0-9]{1,5}(/tcp|/udp|\s))\s+ALLOW OUT.*# ansible managed$"
          args:
            executable: /bin/bash
          register: ufw_outgoing_rules
          changed_when: false

        - name: Print UFW outgoing rules
          ansible.builtin.debug:
            msg: "{{ ufw_outgoing_rules.stdout }}"

        - name: Assert UFW outgoing rules
          ansible.builtin.assert:
            that:
              - "'22/tcp' in ufw_outgoing_rules.stdout"
              - "'53' in ufw_outgoing_rules.stdout"
              - "'80/tcp' in ufw_outgoing_rules.stdout"
              - "'123/udp' in ufw_outgoing_rules.stdout"
              - "'443/tcp' in ufw_outgoing_rules.stdout"
              - "'853' in ufw_outgoing_rules.stdout"
            fail_msg: "Expected UFW outgoing rules not found"
