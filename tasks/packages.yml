---
- name: Generic package removal
  become: true
  ansible.builtin.package:
    name: "{{ packages_blocklist }}"
    state: absent
  register: package_removal
  failed_when:
    - package_removal is not success
    - not "No package" in package_removal.msg

- name: Debian family package installation
  become: true
  ansible.builtin.apt:
    name: "{{ packages_debian }}"
    state: present
    install_recommends: false
    update_cache: true
  when:
    - ansible_os_family == "Debian"
    - packages_debian | length > 0
  notify:
    - Run apt-get clean
    - Run apt-get autoremove

- name: Ubuntu package installation
  become: true
  ansible.builtin.apt:
    name: "{{ packages_ubuntu }}"
    state: present
    install_recommends: false
    update_cache: true
  when:
    - ansible_distribution == "Ubuntu"
    - packages_ubuntu | length > 0
  notify:
    - Run apt-get clean
    - Run apt-get autoremove

- name: Ubuntu update-notifier-common package installation
  become: true
  ansible.builtin.apt:
    name: update-notifier-common
    state: present
    install_recommends: false
  when:
    - ansible_distribution == "Ubuntu"

- name: RedHat family package installation
  become: true
  ansible.builtin.dnf:
    name: "{{ packages_redhat }}"
    state: present
    update_cache: true
  when:
    - ansible_os_family == "RedHat"
    - packages_redhat | length > 0
  notify:
    - Run dnf autoremove

- name: Run apt purge
  become: true
  ansible.builtin.apt:
    name: "{{ packages_blocklist }}"
    state: absent
    purge: true
  register: apt_purge
  failed_when:
    - apt_purge is not success
    - not "No package" in apt_purge.msg
  when:
    - ansible_os_family == "Debian"
  notify:
    - Run apt-get clean
    - Run apt-get autoremove

- name: VirtualBox guest packages installation
  become: true
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    install_recommends: false
  vars:
    packages:
      - virtualbox-guest-dkms
      - virtualbox-guest-utils
  register: virtualbox_packages
  when:
    - ansible_virtualization_type == "VirtualBox"
    - ansible_distribution == "Ubuntu"
  failed_when:
    - virtualbox_packages is not success
    - not "No package matching" in virtualbox_packages.msg

- name: VMWare package installation
  become: true
  ansible.builtin.package:
    name: open-vm-tools
    state: present
  when:
    - ansible_virtualization_type == "VMware"

- name: QEMU package installation
  become: true
  ansible.builtin.package:
    name: qemu-guest-agent
    state: present
  when:
    - ansible_system_vendor == "QEMU"

- name: Install and start rngd
  become: true
  when:
    - ansible_flags is defined
    - "'rdrand' in ansible_flags"
    - ansible_virtualization_type not in ["container", "docker", "podman"]
  block:
    - name: Install rngd
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - "{{ 'rng-tools5' if (ansible_os_family == 'Debian') else 'rng-tools' }}"

    - name: Start and enable rngd service
      ansible.builtin.systemd:
        name: rngd
        state: started
        enabled: true

- name: Stat sysstat default
  become: true
  ansible.builtin.stat:
    path: /etc/default/sysstat
  register: default_sysstat

- name: Enable sysstat
  become: true
  ansible.builtin.lineinfile:
    regexp: ^ENABLED
    line: ENABLED="true"
    dest: /etc/default/sysstat
    mode: "0644"
    state: present
    create: false
    backrefs: true
  when:
    - default_sysstat.stat.exists

- name: Remove unneeded Debian dependencies
  become: true
  ansible.builtin.apt:
    autoclean: true
    autoremove: true
    clean: true
  changed_when: false
  when:
    - ansible_os_family == "Debian"

- name: Run dnf autoremove
  become: true
  ansible.builtin.dnf:
    autoremove: true
  when:
    - ansible_os_family == "RedHat"

- name: Populate package facts
  ansible.builtin.package_facts:

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Configure needrestart
  become: true
  when:
    - '"needrestart" in ansible_facts.packages'
  block:
    - name: Pre register needrestart configuration directory
      ansible.builtin.stat:
        path: /etc/needrestart/conf.d
      register: needrestart_directory_created

    - name: Create needrestart directory
      ansible.builtin.file:
        path: /etc/needrestart/conf.d
        state: directory
        owner: root
        group: root
        mode: "0755"
        recurse: true
      when:
        - not needrestart_directory_created.stat.exists

    - name: Stat needrestart configuration directory
      ansible.builtin.stat:
        path: /etc/needrestart/conf.d
      register: needrestart_directory

    - name: Get needrestart restart value
      ansible.builtin.command:
        cmd: grep -Rqo "$nrconf{restart} = 'l';" /etc/needrestart/conf.d/
      register: needrestart_restart_set
      when:
        - needrestart_directory.stat.exists
      changed_when: needrestart_restart_set.rc != 0
      failed_when: needrestart_restart_set.rc > 1

    - name: Configure needrestart
      ansible.builtin.lineinfile:
        path: /etc/needrestart/conf.d/00-restart.conf
        line: $nrconf{restart} = 'l';
        create: true
        owner: root
        group: root
        mode: "0644"
      when:
        - needrestart_directory.stat.exists
        - needrestart_restart_set.rc != 0
