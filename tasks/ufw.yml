---
- name: Add the nf_conntrack module
  become: true
  community.general.modprobe:
    name: nf_conntrack
    state: present

- name: Stat nf_conntrack_tcp_be_liberal
  become: true
  ansible.builtin.stat:
    path: /proc/sys/net/netfilter/nf_conntrack_tcp_be_liberal
  register: conntrackliberal

# https://github.com/ansible/ansible/issues/45446
- name: Enable nf_conntrack_tcp_be_liberal to keep connections alive
  become: true
  ansible.posix.sysctl:
    name: net.netfilter.nf_conntrack_tcp_be_liberal
    value: "1"
    state: present
    sysctl_set: true
    sysctl_file: "{{ sysctl_conf_dir }}/zz-ufw-hardening.conf"
    reload: true
  when:
    - conntrackliberal.stat.exists

- name: Debian family UFW installation
  become: true
  ansible.builtin.apt:
    name: ufw
    state: present
    install_recommends: false
  when:
    - ansible_os_family == "Debian"

- name: RedHat family UFW installation
  become: true
  ansible.builtin.dnf:
    name: ufw
    state: present
  when:
    - ansible_os_family == "RedHat"

- name: Get available physical interfaces
  ansible.builtin.command:
    cmd: find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n'
  register: physical_interfaces
  changed_when: false
  failed_when: physical_interfaces.rc != 0

- name: Set UFW IPT_SYSCTL
  become: true
  ansible.builtin.lineinfile:
    regexp: ^IPT_SYSCTL=
    line: IPT_SYSCTL={{ sysctl_conf_dir }}/zz-ufw-hardening.conf
    dest: /etc/default/ufw
    mode: "0640"
    state: present
    create: false
    backrefs: true

- name: Get UFW status
  become: true
  ansible.builtin.command:
    cmd: ufw status verbose
  changed_when: false
  register: ufw_status

- name: Enable UFW and set default deny
  become: true
  when: >
    'deny (incoming)' not in ufw_status.stdout or
    'deny (outgoing)' not in ufw_status.stdout or
    'disabled (routed)' not in ufw_status.stdout
  block:
    - name: Enable UFW service
      ansible.builtin.systemd:
        name: ufw
        enabled: true
        state: started
      when:
        - ansible_virtualization_type not in ["container", "docker", "podman"]

    - name: Set default deny
      community.general.ufw:
        state: enabled
        direction: "{{ item }}"
        default: deny
        log: true
        logging: low
        comment: ansible managed
      loop:
        - incoming
        - outgoing

- name: Stat UFW rules
  become: true
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      ufw show added | grep '^ufw' | grep -i -v "'ansible\smanaged'" | sed 's/ufw //g'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: ufw_not_managed.rc > 1
  register: ufw_not_managed

- name: Create UFW rules
  become: true
  block:
    - name: Set rate limit on physical interfaces
      community.general.ufw:
        rule: limit
        interface: "{{ item }}"
        direction: in
        comment: ansible managed
      loop: "{{ physical_interfaces.stdout_lines }}"
      when:
        - ufw_rate_limit

    - name: Allow sshd port from administrator networks
      community.general.ufw:
        rule: limit
        from_ip: "{{ item.0 }}"
        to_port: "{{ item.1 | int }}"
        proto: tcp
        comment: ansible managed
      loop: "{{ sshd_admin_net | product(sshd_ports) | list }}"

    - name: Allow outgoing specified ports
      community.general.ufw:
        rule: allow
        to_port: "{{ item | int }}"
        direction: out
        comment: ansible managed
      loop: "{{ ufw_outgoing_traffic }}"

    - name: Allow incoming specified ports
      community.general.ufw:
        rule: allow
        to_port: "{{ item | int }}"
        direction: in
        comment: ansible managed
      loop: "{{ ufw_incoming_traffic }}"

    - name: Deny IPv4 loopback network traffic
      community.general.ufw:
        rule: deny
        from_ip: 127.0.0.0/8
        comment: ansible managed

    - name: Deny IPv6 loopback network traffic
      when:
        - not disable_ipv6
      community.general.ufw:
        rule: deny
        from_ip: ::1
        comment: ansible managed

    - name: Allow loopback traffic in
      community.general.ufw:
        rule: allow
        interface: lo
        direction: in
        comment: ansible managed

    - name: Allow loopback traffic out
      community.general.ufw:
        rule: allow
        interface: lo
        direction: out
        comment: ansible managed

    - name: Delete unmanaged UFW rules
      ansible.builtin.command:
        cmd: ufw delete {{ item }}
      register: ufw_delete
      changed_when: ufw_delete.rc != 0
      failed_when: ufw_delete.rc != 0
      when:
        - ufw_not_managed.stdout_lines | length > 0
      loop: "{{ ufw_not_managed.stdout_lines }}"

- name: Configure conntrack sysctl
  become: true
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value | int }}"
    state: present
    sysctl_set: true
    sysctl_file: "{{ sysctl_conf_dir }}/zz-ufw-hardening.conf"
  with_dict: "{{ conntrack_sysctl_settings }}"
  notify:
    - Restart sysctl
